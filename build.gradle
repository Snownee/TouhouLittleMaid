buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
// 只需要编辑下面的东西即可，上部的代码是 Forge 设置所添加并必须的。

// 模组的基本信息，包括版本，包名等
// 参考 http://maven.apache.org/guides/mini/guide-naming-conventions.html 了解命名规则
version = mod_version
group = "com.github.tartaricacid"
archivesBaseName = "touhoulittlemaid"

// 此处需要它，以便 eclipse 任务能够正确生成。
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    // 所使用的 Forge 版本
    version = "1.12.2-${forge_version}"
    // 游戏试运行时的文件夹
    runDir = "run"
    // MCP 的版本，修改后只需要重新构建开发环境即可
    mappings = mcp_mappings
    // 将代码中的所有 @VERSION@ 字段替换为 version 变量
    replace "@VERSION@", project.version
}

// 添加仓库
repositories {
    maven {
        // JEI
        name = "Progwml6 Maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // HWYLA
        name = "Tehnut Maven"
        url = "http://tehnut.info/maven"
    }
    maven {
        // The One Probe
        name = 'tterrag maven'
        url = "http://maven.tterrag.com/"
    }
    maven {
        name = "MCMultiPart2 Maven"
        url = "http://maven.amadornes.com/"
    }
    maven {
        // Patchouli
        name = 'Blamejared Maven'
        url = 'https://maven.blamejared.com'
    }
}

dependencies {
    //  JEI
    deobfCompile "mezz.jei:jei_1.12.2:${jei_version}"
    // HWYLA
    deobfCompile "mcp.mobius.waila:Hwyla:${hwyla_version}"
    // The One Probe
    deobfCompile("mcjty.theoneprobe:TheOneProbe-1.12:${top_version}") {
        exclude group: 'cofh'
    }
    deobfCompile "MCMultiPart2:MCMultiPart:${mcmp_version}"
    compile "vazkii.patchouli:Patchouli:${patchouli_version}"
    // 想要了解更多，可以查询如下网址
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// 处理资源部分
processResources {
    // 在版本更改时，这将确保任务会进行重置
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // 将资源部部分的 mcmod.info 文件的 ${version} 和 ${mcversion} 替换为如下两个变量
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // 复制除 mcmod.info 之外的所有其他内容
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// 强制将编译环境的变化设置为 UTF-8 编码
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// 打包部分
jar {
    // 打包的包名
    if (System.getenv().BUILD_NUMBER != null) {
        // 在 Jenkins 上，打包名为 touhoulittlemaid-1.12.2-jenkins-build-3.jar 这样的
        archiveName = archivesBaseName + "-1.12.2-jenkins-build-${System.getenv().BUILD_NUMBER}.jar"
    } else {
        // 默认环境为 touhoulittlemaid-1.12.2-1.1.4-alpha.jar 这样的
        archiveName = archivesBaseName + "-1.12.2-${mod_version}-beta.jar"
    }
    // 打包 Access Transformers 文件
    manifest {
        attributes 'FMLAT': 'touhou_little_maid_at.cfg'
    }
}
